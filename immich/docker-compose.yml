version: "3.8"

services:


  cache:
    image: redis:7-alpine
    restart: unless-stopped

    labels:
      - 'com.centurylinklabs.watchtower.scope=${PROJECT_NAME}'
      - 'com.centurylinklabs.watchtower.enable=true'

    networks:
      - immich_network


  database:
    image: postgres:15
    restart: unless-stopped

    labels:
      - 'com.centurylinklabs.watchtower.scope=${PROJECT_NAME}'
      - 'com.centurylinklabs.watchtower.enable=true'

    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      PG_DATA: /var/lib/postgresql/data
    
    volumes:
      - ${DB_VOLUME}:/var/lib/postgresql/data
    
    networks:
      - immich_network


  immich-server:
    image: altran1502/immich-server:release
    entrypoint: ["/bin/sh", "./start-server.sh"]
    restart: unless-stopped

    labels:
      - 'com.centurylinklabs.watchtower.scope=${PROJECT_NAME}'
      - 'com.centurylinklabs.watchtower.enable=true'

    env_file:
      - .env
    environment:
      - NODE_ENV=production
    
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
    
    networks:
      - immich_network

    depends_on:
      - cache
      - database


  immich-microservices:
    image: altran1502/immich-server:release
    entrypoint: ["/bin/sh", "./start-microservices.sh"]
    restart: unless-stopped

    labels:
      - 'com.centurylinklabs.watchtower.scope=${PROJECT_NAME}'
      - 'com.centurylinklabs.watchtower.enable=true'

    env_file:
      - .env
    environment:
      - NODE_ENV=production

    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
    
    networks:
      - immich_network

    depends_on:
      - cache
      - database


  immich-machine-learning:
    image: altran1502/immich-machine-learning:release
    entrypoint: ["/bin/sh", "./entrypoint.sh"]
    restart: unless-stopped

    labels:
      - 'com.centurylinklabs.watchtower.scope=${PROJECT_NAME}'
      - 'com.centurylinklabs.watchtower.enable=true'

    env_file:
      - .env
    environment:
      - NODE_ENV=production

    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
    
    networks:
      - immich_network
    
    depends_on:
      - database


  immich-web:
    image: altran1502/immich-web:release
    entrypoint: ["/bin/sh", "./entrypoint.sh"]
    restart: unless-stopped

    labels:
      - 'com.centurylinklabs.watchtower.scope=${PROJECT_NAME}'
      - 'com.centurylinklabs.watchtower.enable=true'

    env_file:
      - .env
    environment:
      - PUBLIC_IMMICH_SERVER_URL=${IMMICH_SERVER_URL}

    networks:
      - immich_network
    
    depends_on:
      - database

  
  immich-proxy:
    image: altran1502/immich-proxy:release
    container_name: immich_proxy
    restart: unless-stopped

    environment:
      # Make sure these values get passed through from the env file
      - IMMICH_SERVER_URL
      - IMMICH_WEB_URL

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_network"

      - "traefik.http.services.immich.loadbalancer.server.port=8080"

      - "traefik.http.routers.immich-https.entrypoints=https"
      - "traefik.http.routers.immich-https.rule=Host(`${IMMICH_DOMAIN}`)"
      - "traefik.http.routers.immich-https.tls.certresolver=letsencrypt"

      - "traefik.http.middlewares.immich-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.immich-https.redirectscheme.permanent=true"

      - "traefik.http.routers.immich-http.entrypoints=http"
      - "traefik.http.routers.immich-http.rule=Host(`${IMMICH_DOMAIN}`)"
      - "traefik.http.routers.immich-http.middlewares=immich-https"

      - 'com.centurylinklabs.watchtower.scope=${PROJECT_NAME}'
      - 'com.centurylinklabs.watchtower.enable=true'
    
    networks:
      - immich_network
      - traefik_network

    depends_on:
      - immich-server
      - immich-web


networks:
  immich_network:
  traefik_network:
    external: true
